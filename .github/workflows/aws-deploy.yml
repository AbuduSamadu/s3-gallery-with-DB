name: AWS Infrastructure and Application Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Deploy VPC Stack
      - name: Deploy VPC Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/vpc-stack.yaml \
            --stack-name my-vpc-stack\
            --capabilities CAPABILITY_NAMED_IAM

      # Deploy ECS Stack
      - name: Deploy ECS Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/ecs-stack.yaml \
            --stack-name my-ecs-stack \
            --capabilities CAPABILITY_NAMED_IAM

      # Deploy CodeDeploy Stack
      - name: Deploy CodeDeploy Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/codeDeploy-stack.yaml\
            --stack-name my-codeDeploy-stack\
            --capabilities CAPABILITY_NAMED_IAM

  build-and-push-image:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

  trigger-codedeploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Trigger CodeDeploy for ECS blue/green deployment
      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.ENVIRONMENT_NAME }}-codedeploy-app \
            --deployment-group-name ${{ env.ENVIRONMENT_NAME }}-codedeploy-group \
            --revision "{\"revisionType\":\"S3\",\"s3Location\":{\"bucket\":\"${{ env.ECR_REPOSITORY }}\",\"key\":\"task-definition.json\"}}"